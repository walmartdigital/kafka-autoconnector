// Code generated by MockGen. DO NOT EDIT.
// Source: event.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	record "k8s.io/client-go/tools/record"
	reflect "reflect"
)

// MockEventSink is a mock of EventSink interface
type MockEventSink struct {
	ctrl     *gomock.Controller
	recorder *MockEventSinkMockRecorder
}

// MockEventSinkMockRecorder is the mock recorder for MockEventSink
type MockEventSinkMockRecorder struct {
	mock *MockEventSink
}

// NewMockEventSink creates a new mock instance
func NewMockEventSink(ctrl *gomock.Controller) *MockEventSink {
	mock := &MockEventSink{ctrl: ctrl}
	mock.recorder = &MockEventSinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventSink) EXPECT() *MockEventSinkMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockEventSink) Create(event *v1.Event) (*v1.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", event)
	ret0, _ := ret[0].(*v1.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockEventSinkMockRecorder) Create(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEventSink)(nil).Create), event)
}

// Update mocks base method
func (m *MockEventSink) Update(event *v1.Event) (*v1.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", event)
	ret0, _ := ret[0].(*v1.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockEventSinkMockRecorder) Update(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEventSink)(nil).Update), event)
}

// Patch mocks base method
func (m *MockEventSink) Patch(oldEvent *v1.Event, data []byte) (*v1.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", oldEvent, data)
	ret0, _ := ret[0].(*v1.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch
func (mr *MockEventSinkMockRecorder) Patch(oldEvent, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockEventSink)(nil).Patch), oldEvent, data)
}

// MockEventRecorder is a mock of EventRecorder interface
type MockEventRecorder struct {
	ctrl     *gomock.Controller
	recorder *MockEventRecorderMockRecorder
}

// MockEventRecorderMockRecorder is the mock recorder for MockEventRecorder
type MockEventRecorderMockRecorder struct {
	mock *MockEventRecorder
}

// NewMockEventRecorder creates a new mock instance
func NewMockEventRecorder(ctrl *gomock.Controller) *MockEventRecorder {
	mock := &MockEventRecorder{ctrl: ctrl}
	mock.recorder = &MockEventRecorderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventRecorder) EXPECT() *MockEventRecorderMockRecorder {
	return m.recorder
}

// Event mocks base method
func (m *MockEventRecorder) Event(object runtime.Object, eventtype, reason, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Event", object, eventtype, reason, message)
}

// Event indicates an expected call of Event
func (mr *MockEventRecorderMockRecorder) Event(object, eventtype, reason, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Event", reflect.TypeOf((*MockEventRecorder)(nil).Event), object, eventtype, reason, message)
}

// Eventf mocks base method
func (m *MockEventRecorder) Eventf(object runtime.Object, eventtype, reason, messageFmt string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{object, eventtype, reason, messageFmt}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Eventf", varargs...)
}

// Eventf indicates an expected call of Eventf
func (mr *MockEventRecorderMockRecorder) Eventf(object, eventtype, reason, messageFmt interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{object, eventtype, reason, messageFmt}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eventf", reflect.TypeOf((*MockEventRecorder)(nil).Eventf), varargs...)
}

// PastEventf mocks base method
func (m *MockEventRecorder) PastEventf(object runtime.Object, timestamp v10.Time, eventtype, reason, messageFmt string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{object, timestamp, eventtype, reason, messageFmt}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "PastEventf", varargs...)
}

// PastEventf indicates an expected call of PastEventf
func (mr *MockEventRecorderMockRecorder) PastEventf(object, timestamp, eventtype, reason, messageFmt interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{object, timestamp, eventtype, reason, messageFmt}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PastEventf", reflect.TypeOf((*MockEventRecorder)(nil).PastEventf), varargs...)
}

// AnnotatedEventf mocks base method
func (m *MockEventRecorder) AnnotatedEventf(object runtime.Object, annotations map[string]string, eventtype, reason, messageFmt string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{object, annotations, eventtype, reason, messageFmt}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AnnotatedEventf", varargs...)
}

// AnnotatedEventf indicates an expected call of AnnotatedEventf
func (mr *MockEventRecorderMockRecorder) AnnotatedEventf(object, annotations, eventtype, reason, messageFmt interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{object, annotations, eventtype, reason, messageFmt}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnnotatedEventf", reflect.TypeOf((*MockEventRecorder)(nil).AnnotatedEventf), varargs...)
}

// MockEventBroadcaster is a mock of EventBroadcaster interface
type MockEventBroadcaster struct {
	ctrl     *gomock.Controller
	recorder *MockEventBroadcasterMockRecorder
}

// MockEventBroadcasterMockRecorder is the mock recorder for MockEventBroadcaster
type MockEventBroadcasterMockRecorder struct {
	mock *MockEventBroadcaster
}

// NewMockEventBroadcaster creates a new mock instance
func NewMockEventBroadcaster(ctrl *gomock.Controller) *MockEventBroadcaster {
	mock := &MockEventBroadcaster{ctrl: ctrl}
	mock.recorder = &MockEventBroadcasterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventBroadcaster) EXPECT() *MockEventBroadcasterMockRecorder {
	return m.recorder
}

// StartEventWatcher mocks base method
func (m *MockEventBroadcaster) StartEventWatcher(eventHandler func(*v1.Event)) watch.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartEventWatcher", eventHandler)
	ret0, _ := ret[0].(watch.Interface)
	return ret0
}

// StartEventWatcher indicates an expected call of StartEventWatcher
func (mr *MockEventBroadcasterMockRecorder) StartEventWatcher(eventHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartEventWatcher", reflect.TypeOf((*MockEventBroadcaster)(nil).StartEventWatcher), eventHandler)
}

// StartRecordingToSink mocks base method
func (m *MockEventBroadcaster) StartRecordingToSink(sink record.EventSink) watch.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRecordingToSink", sink)
	ret0, _ := ret[0].(watch.Interface)
	return ret0
}

// StartRecordingToSink indicates an expected call of StartRecordingToSink
func (mr *MockEventBroadcasterMockRecorder) StartRecordingToSink(sink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRecordingToSink", reflect.TypeOf((*MockEventBroadcaster)(nil).StartRecordingToSink), sink)
}

// StartLogging mocks base method
func (m *MockEventBroadcaster) StartLogging(logf func(string, ...interface{})) watch.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartLogging", logf)
	ret0, _ := ret[0].(watch.Interface)
	return ret0
}

// StartLogging indicates an expected call of StartLogging
func (mr *MockEventBroadcasterMockRecorder) StartLogging(logf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLogging", reflect.TypeOf((*MockEventBroadcaster)(nil).StartLogging), logf)
}

// NewRecorder mocks base method
func (m *MockEventBroadcaster) NewRecorder(scheme *runtime.Scheme, source v1.EventSource) record.EventRecorder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRecorder", scheme, source)
	ret0, _ := ret[0].(record.EventRecorder)
	return ret0
}

// NewRecorder indicates an expected call of NewRecorder
func (mr *MockEventBroadcasterMockRecorder) NewRecorder(scheme, source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRecorder", reflect.TypeOf((*MockEventBroadcaster)(nil).NewRecorder), scheme, source)
}

// Shutdown mocks base method
func (m *MockEventBroadcaster) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockEventBroadcasterMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockEventBroadcaster)(nil).Shutdown))
}
