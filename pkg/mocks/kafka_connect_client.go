// Code generated by MockGen. DO NOT EDIT.
// Source: kafka_connect_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	client "github.com/walmartdigital/go-kaya/pkg/client"
	kafkaconnect "github.com/walmartdigital/go-kaya/pkg/kafkaconnect"
	reflect "reflect"
)

// MockKafkaConnectClient is a mock of KafkaConnectClient interface
type MockKafkaConnectClient struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaConnectClientMockRecorder
}

// MockKafkaConnectClientMockRecorder is the mock recorder for MockKafkaConnectClient
type MockKafkaConnectClientMockRecorder struct {
	mock *MockKafkaConnectClient
}

// NewMockKafkaConnectClient creates a new mock instance
func NewMockKafkaConnectClient(ctrl *gomock.Controller) *MockKafkaConnectClient {
	mock := &MockKafkaConnectClient{ctrl: ctrl}
	mock.recorder = &MockKafkaConnectClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKafkaConnectClient) EXPECT() *MockKafkaConnectClientMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockKafkaConnectClient) Create(connector kafkaconnect.Connector) (*kafkaconnect.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", connector)
	ret0, _ := ret[0].(*kafkaconnect.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockKafkaConnectClientMockRecorder) Create(connector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockKafkaConnectClient)(nil).Create), connector)
}

// Read mocks base method
func (m *MockKafkaConnectClient) Read(connector string) (*kafkaconnect.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", connector)
	ret0, _ := ret[0].(*kafkaconnect.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockKafkaConnectClientMockRecorder) Read(connector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockKafkaConnectClient)(nil).Read), connector)
}

// Update mocks base method
func (m *MockKafkaConnectClient) Update(connector kafkaconnect.Connector) (*kafkaconnect.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", connector)
	ret0, _ := ret[0].(*kafkaconnect.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockKafkaConnectClientMockRecorder) Update(connector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockKafkaConnectClient)(nil).Update), connector)
}

// Delete mocks base method
func (m *MockKafkaConnectClient) Delete(connector string) (*kafkaconnect.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", connector)
	ret0, _ := ret[0].(*kafkaconnect.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockKafkaConnectClientMockRecorder) Delete(connector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKafkaConnectClient)(nil).Delete), connector)
}

// MockKafkaConnectClientFactory is a mock of KafkaConnectClientFactory interface
type MockKafkaConnectClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaConnectClientFactoryMockRecorder
}

// MockKafkaConnectClientFactoryMockRecorder is the mock recorder for MockKafkaConnectClientFactory
type MockKafkaConnectClientFactoryMockRecorder struct {
	mock *MockKafkaConnectClientFactory
}

// NewMockKafkaConnectClientFactory creates a new mock instance
func NewMockKafkaConnectClientFactory(ctrl *gomock.Controller) *MockKafkaConnectClientFactory {
	mock := &MockKafkaConnectClientFactory{ctrl: ctrl}
	mock.recorder = &MockKafkaConnectClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKafkaConnectClientFactory) EXPECT() *MockKafkaConnectClientFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockKafkaConnectClientFactory) Create(arg0 string, arg1 client.HTTPClientFactory) (kafkaconnect.KafkaConnectClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(kafkaconnect.KafkaConnectClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockKafkaConnectClientFactoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockKafkaConnectClientFactory)(nil).Create), arg0, arg1)
}
